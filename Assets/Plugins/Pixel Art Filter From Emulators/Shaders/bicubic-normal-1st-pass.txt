
/*
   Copyright (C) 2010 Team XBMC
   http://www.xbmc.org
   Copyright (C) 2011 Stefanos A.
   http://www.opentk.com

This Program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2, or (at your option)
any later version.

This Program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with XBMC; see the file COPYING.  If not, write to
the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
http://www.gnu.org/copyleft/gpl.html

    From this forum post:
        http://board.byuu.org/viewtopic.php?p=33488#p33488

*/
		/*
		Leonardo da Luz Pinto's Bicubic shader Adaptation to Unity ShaderLab

		Copyright (C) 2018 Leo Luz - leodluz@yahoo.com/leoluzprog@gmail.com

		Permission is hereby granted, free of charge, to any person obtaining a copy
		of this software and associated documentation files (the "Software"), to deal
		in the Software without restriction, including without limitation the rights
		to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
		copies of the Software, and to permit persons to whom the Software is
		furnished to do so, subject to the following conditions:

		The above copyright notice and this permission notice shall be included in
		all copies or substantial portions of the Software.

		THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
		IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
		FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
		AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
		LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
		OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
		THE SOFTWARE.

		*/
#include "compat_includes.inc"
	struct out_vertex
	{
		float4 position : POSITION;
		float2 texCoord : TEXCOORD0;
	};
	 
	//VERTEX_SHADER
	out_vertex main_vertex(appdata_base v)
	{

		out_vertex OUT;
		OUT.position = UnityObjectToClipPos(v.vertex);
		OUT.texCoord = v.texcoord;

		return OUT;
	}

	float weight(float x)
	{
		float ax = abs(x);
		// Mitchel-Netravali coefficients.
		// Best psychovisual result.
		const float B = 1.0 / 3.0;
		const float C = 1.0 / 3.0;

		// Sharper version.
		// May look better in some cases.
		//const float B = 0.0;
		//const float C = 0.75;

		if (ax < 1.0)
		{
			return
				(
					pow(x, 2.0) * ((12.0 - 9.0 * B - 6.0 * C) * ax + (-18.0 + 12.0 * B + 6.0 * C)) +
					(6.0 - 2.0 * B)
					) / 6.0;
		}
		else if ((ax >= 1.0) && (ax < 2.0))
		{
			return
				(
					pow(x, 2.0) * ((-B - 6.0 * C) * ax + (6.0 * B + 30.0 * C)) +
					(-12.0 * B - 48.0 * C) * ax + (8.0 * B + 24.0 * C)
					) / 6.0;
		}
		else
		{
			return 0.0;
		}
	}

	float4 weight4(float x)
	{
		return float4(
			weight(x - 2.0),
			weight(x - 1.0),
			weight(x),
			weight(x + 1.0));
	}

	float3 pixel(float xpos, float ypos, COMPAT_Texture2D(s_p))
	{
		return COMPAT_SamplePoint(s_p, float2(xpos, ypos)).rgb;
	}

	float3 line_run(float ypos, float4 xpos, float4 linetaps, COMPAT_Texture2D(s_p))
	{
		return
			pixel(xpos.r, ypos, s_p) * linetaps.r +
			pixel(xpos.g, ypos, s_p) * linetaps.g +
			pixel(xpos.b, ypos, s_p) * linetaps.b +
			pixel(xpos.a, ypos, s_p) * linetaps.a;
	}
	float4 bicubic(float2 texture_size, COMPAT_Texture2D(decal), float2 texCoord)
	{
		float2 stepxy = float2(1.0 / texture_size.x, 1.0 / texture_size.y);
		float2 pos = texCoord.xy + stepxy * 0.5;
		float2 f = frac(pos / stepxy);

		float4 linetaps = weight4(1.0 - f.x);
		float4 columntaps = weight4(1.0 - f.y);

		//make sure all taps added together is exactly 1.0, otherwise some (very small) distortion can occur
		linetaps /= linetaps.r + linetaps.g + linetaps.b + linetaps.a;
		columntaps /= columntaps.r + columntaps.g + columntaps.b + columntaps.a;

		float2 xystart = (-1.5 - f) * stepxy + pos;
		float4 xpos = float4(xystart.x, xystart.x + stepxy.x, xystart.x + stepxy.x * 2.0, xystart.x + stepxy.x * 3.0);


		// final sum and weight normalization
		float4 final = float4(line_run(xystart.y, xpos, linetaps, decal) * columntaps.r +
			line_run(xystart.y + stepxy.y, xpos, linetaps, decal) * columntaps.g +
			line_run(xystart.y + stepxy.y * 2.0, xpos, linetaps, decal) * columntaps.b +
			line_run(xystart.y + stepxy.y * 3.0, xpos, linetaps, decal) * columntaps.a, 1);
		return final;
	}

	//FRAGMENT SHADER
	half4 main_fragment(out_vertex VAR) : COLOR
	{
		return bicubic(texture_size*bilinear_scale, _BackgroundTexture, VAR.texCoord);
	}

